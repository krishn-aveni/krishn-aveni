import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

# Load dataset
df = pd.read_csv('dataset.csv')

# Ensure date is parsed and sorted
df['Date'] = pd.to_datetime(df['Date'])
df.sort_values('Date', inplace=True)

# Use 'Close' price only
data = df[['Close']].values

# Scale data
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data)

# Create sequences
sequence_length = 60
X, y = [], []
for i in range(sequence_length, len(scaled_data)):
    X.append(scaled_data[i-sequence_length:i, 0])
    y.append(scaled_data[i, 0])

X, y = np.array(X), np.array(y)
X = X.reshape((X.shape[0], X.shape[1], 1))

# Build LSTM model
model = Sequential([
    LSTM(64, return_sequences=True, input_shape=(X.shape[1], 1)),
    Dropout(0.2),
    LSTM(64),
    Dropout(0.2),
    Dense(1)
])
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X, y, epochs=20, batch_size=32)

# Predict the next closing price
last_sequence = scaled_data[-sequence_length:]
last_sequence = last_sequence.reshape((1, sequence_length, 1))
predicted_price = model.predict(last_sequence)
predicted_price = scaler.inverse_transform(predicted_price)

print(f"Predicted next closing price: ${predicted_price[0][0]:.2f}")

# Plot actual vs predicted on recent data
recent_data = scaled_data[-(sequence_length + 100):]
X_recent = []
for i in range(sequence_length, len(recent_data)):
    X_recent.append(recent_data[i-sequence_length:i, 0])
X_recent = np.array(X_recent).reshape(-1, sequence_length, 1)

y_recent_pred = model.predict(X_recent)
y_recent_pred = scaler.inverse_transform(y_recent_pred)

plt.figure(figsize=(12,6))
plt.plot(data[-len(y_recent_pred):], label='Actual Price')
plt.plot(y_recent_pred, label='Predicted Price', color='red')
plt.title("Stock Price Prediction")
plt.xlabel("Time")
plt.ylabel("Price")
plt.legend()
plt.show()
