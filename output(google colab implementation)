import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

# === Step 1: Load and Prepare Dataset ===
file_path = 'dataset.csv'
df = pd.read_csv(file_path)

# Ensure proper datetime format
df['Date'] = pd.to_datetime(df['Date'])
df.sort_values('Date', inplace=True)

# Extract closing prices
data = df[['Close']].values

# === Step 2: Normalize Data ===
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data)

# === Step 3: Create Time Series Sequences ===
sequence_length = 60
X, y = [], []
for i in range(sequence_length, len(scaled_data)):
    X.append(scaled_data[i-sequence_length:i, 0])
    y.append(scaled_data[i, 0])

X = np.array(X)
y = np.array(y)
X = X.reshape((X.shape[0], X.shape[1], 1))

# === Step 4: Build LSTM Model ===
model = Sequential()
model.add(LSTM(units=64, return_sequences=True, input_shape=(X.shape[1], 1)))
model.add(Dropout(0.2))
model.add(LSTM(units=64))
model.add(Dropout(0.2))
model.add(Dense(units=1))

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X, y, epochs=20, batch_size=32)

# === Step 5: Predict Future Price ===
last_sequence = scaled_data[-sequence_length:]
last_sequence = last_sequence.reshape((1, sequence_length, 1))
predicted_price = model.predict(last_sequence)
predicted_price = scaler.inverse_transform(predicted_price)

print(f"\nðŸ“ˆ Predicted next closing price: ${predicted_price[0][0]:.2f}\n")

# === Step 6: Plot Recent Predictions vs Actual ===
recent_data = scaled_data[-(sequence_length + 100):]
X_recent = []
for i in range(sequence_length, len(recent_data)):
    X_recent.append(recent_data[i-sequence_length:i, 0])
X_recent = np.array(X_recent).reshape(-1, sequence_length, 1)

y_recent_pred = model.predict(X_recent)
y_recent_pred = scaler.inverse_transform(y_recent_pred)

# Get actual recent prices for comparison
actual_recent = data[-len(y_recent_pred):]

plt.figure(figsize=(12, 6))
plt.plot(actual_recent, label='Actual Price')
plt.plot(y_recent_pred, label='Predicted Price', color='red')
plt.title("ðŸ“Š Actual vs Predicted Stock Prices")
plt.xlabel("Days")
plt.ylabel("Price")
plt.legend()
plt.tight_layout()
plt.grid(True)
plt.show()
